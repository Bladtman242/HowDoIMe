---
title: Slider scaling
---

This is a (very, very, very delayed) response to [Baymard
Institute's](http://baymard.com/) article on [slider
inputs](http://baymard.com/blog/slider-interfaces). The article goes far beyond
what will be considered here --- and you should read it --- but in summary,
linear slider scales provide a poor user experience, because the underlying data
is rarely a uniform distribution. This creates two problems; large portions of the
slider may
<!-- you need to introduce the idea of change in the data the filtering
relationship between slider and data -->
represent no change in the underlying data, and small portions may represent
huge changes in the data. The article suggests solving these problems with the
use of logarithmic or exponential scales, based on the observation that
real-world data often fits these curves better than linear functions.

I propose an alternative solution, that might be more general. In fact, I expect
this solution to fit _any_ dataset you might come up with.
<!-- based on an idea from... -->
Before I go further in-depth with the solution, here is a proof-of-concept.

<script id="mustache-templ" type="x-tmpl-mustache">
	<p>Filter value: {{maxvalue}}</p>
	<p>Matching lenses: {{count}} of {{totaldata}}</p>
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/mustache.js/2.1.3/mustache.min.js"></script>
<script src="data.js"></script>
<script>
function getPoints(slider) {
	//placeholders
	points={length:0};
	var view = {
		maxvalue: 0,
		count: 0,
		totaldata: 0,
	};

	if(slider == "slider-linear") {
		var max = document.getElementById(slider).value;
		data.forEach(function(p){
			if (p.focal_length <= max){
				points.length++;
			}
		});
		view.maxvalue = max;
		view.count = points.length;
		view.totaldata = data.length;
	}

	if(slider == "slider-equalized") {
		var sliderval = document.getElementById(slider).value;
		var max=45;
		for(i=45; i <= sliderval; i++){
				if(i in map){
					max = map[i];
				}
		}
		data.forEach(function(p){
			if (p.focal_length <= max){
				points.length++;
			}
		});
		view.maxvalue = max;
		view.count = points.length;
		view.totaldata = data.length;
	}

	return view;
}

function sliderUpdate(slider){
	var view = getPoints(slider);
	var template = document.getElementById("mustache-templ").innerHTML;
	var target = document.getElementById(slider + "-contentpane");
	var rendered = Mustache.render(template, view);
	target.innerHTML = rendered;
}

function init() {
	var setMinMax = function(slider, min, max) {
		var sliderinput = document.getElementById(slider);
		var mindiv = document.getElementById(slider + "-min");
		var maxdiv = document.getElementById(slider + "-max");

		sliderinput.min = min;
		sliderinput.max = max;
		mindiv.innerHTML = min;
		maxdiv.innerHTML = max;
	}

	//linear
	lin_max = data[data.length -1].focal_length;
	lin_min = data[0].focal_length;
	setMinMax("slider-linear", lin_min, lin_max);

	//hist equalized
	eq_max = lin_max;
	eq_min = lin_min;
	setMinMax("slider-equalized", eq_min, eq_max);

	sliderUpdate("slider-linear");
	sliderUpdate("slider-equalized");
}

</script>

##Lenshawk lenses by focal length
###Linear slider
<div id="slider-linear-min"></div>
<input id="slider-linear" type="range" oninput="sliderUpdate(event.target.id)">
<div id="slider-linear-max"></div>
<div id="slider-linear-contentpane"></div>

###Equalized slider
<div id="slider-equalized-min"></div>
<input id="slider-equalized" type="range" oninput="sliderUpdate(event.target.id)">
<div id="slider-equalized-max"></div>
<div id="slider-equalized-contentpane"></div>

<script>init()</script>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
